{"ast":null,"code":"var _jsxFileName = \"/Users/oliverchen/Projects/FaceDetector/facedector/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport ParticlesBg from 'particles-bg';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js';\n\n// This function returns the request options for the Clarifai API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiJSONRequest = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = 'a293b1da5a3a4e67a2636069fdea6ba7';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'clarifai';\n  const APP_ID = 'main';\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n  // setup the Json request\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n          // \"base64\": IMAGE_BYTES_STRING\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\nclass App extends React.Component {\n  constructor() {\n    super();\n    // This is a function that will be passed down to the ImageLinkForm component\n    this.onInputChange = event => {\n      console.log(event.target.value);\n      this.setState({\n        input: event.target.value\n      });\n    };\n    // Face API Bounding Box\n    this.calculateFaceLocation = data => {\n      const image = document.getElementById('inputimage'); // get image dimensions\n      const width = Number(image.width); // image width\n      const height = Number(image.height); // image height\n      const boxData = data.outputs[0].data.regions;\n      //console.log(`image width: ${width}`)\n      //console.log(`image height: ${height}`)\n\n      if (boxData) {\n        // if boxData not empty\n        this.setState({\n          status: `${boxData.length} human face(s) detected`\n        });\n        return boxData.map(face => {\n          const clarifaiFace = face.region_info.bounding_box;\n          return {\n            leftCol: clarifaiFace.left_col * width,\n            topRow: clarifaiFace.top_row * height,\n            rightCol: width - clarifaiFace.right_col * width,\n            bottomRow: height - clarifaiFace.bottom_row * height\n          };\n        });\n      } else {\n        // if boxData empty\n        // IF 'NO' FACES DETECTED IN IMAGE\n        //console.log(`empty`)\n        this.setState({\n          errors: `no human face(s) detected, please try another image`\n        });\n      }\n    };\n    this.displayFaceBox = boxes => {\n      this.setState({\n        boxes: boxes\n      });\n    };\n    this.onButtonSubmit = () => {\n      console.log('click');\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/face-detection/outputs\", returnClarifaiJSONRequest(this.state.input)).then(response => response.json()).then(result => this.displayFaceBox(this.calculateFaceLocation(result))).catch(error => console.log('error', error));\n    };\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n          type: \"cobweb\",\n          bg: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: this.state.box,\n          imageUrl: this.state.imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this);\n    };\n    this.state = {\n      input: '',\n      imageUrl: '',\n      boxes: []\n    };\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Navigation","Logo","ImageLinkForm","Rank","ParticlesBg","FaceRecognition","jsxDEV","_jsxDEV","returnClarifaiJSONRequest","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","App","Component","constructor","onInputChange","event","console","log","target","value","setState","input","calculateFaceLocation","data","image","document","getElementById","width","Number","height","boxData","outputs","regions","status","length","map","face","clarifaiFace","region_info","bounding_box","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","errors","displayFaceBox","boxes","onButtonSubmit","state","fetch","then","response","json","result","catch","error","render","className","children","type","bg","fileName","_jsxFileName","lineNumber","columnNumber","box"],"sources":["/Users/oliverchen/Projects/FaceDetector/facedector/src/App.js"],"sourcesContent":["import './App.css';\nimport React from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\"; \nimport ParticlesBg from 'particles-bg';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js';\n\n// This function returns the request options for the Clarifai API\nconst returnClarifaiJSONRequest = (imageUrl) => {\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'a293b1da5a3a4e67a2636069fdea6ba7';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'clarifai';\n    const APP_ID = 'main';  \n    // Change these to whatever model and image URL you want to use\n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    // setup the Json request\n    const raw = JSON.stringify({\n      \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n      },\n      \"inputs\": [\n          {\n              \"data\": {\n                  \"image\": {\n                      \"url\": IMAGE_URL\n                      // \"base64\": IMAGE_BYTES_STRING\n                  }\n              }\n          }\n      ]    \n  });\n  \n  const requestOptions = {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n}\n\n\nclass App extends React.Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      boxes: [],\n    }\n  }\n\n  // This is a function that will be passed down to the ImageLinkForm component\n  onInputChange = (event) => {\n    console.log(event.target.value);\n    this.setState({input: event.target.value});\n  }\n\n  // Face API Bounding Box\n  calculateFaceLocation = (data) => {\n    const image = document.getElementById('inputimage'); // get image dimensions\n    const width = Number(image.width); // image width\n    const height = Number(image.height); // image height\n    const boxData = data.outputs[0].data.regions\n    //console.log(`image width: ${width}`)\n    //console.log(`image height: ${height}`)\n\n    if (boxData) { // if boxData not empty\n      this.setState({status: `${boxData.length} human face(s) detected`});\n      return boxData.map(face => {\n        const clarifaiFace = face.region_info.bounding_box;\n        return {\n          leftCol: clarifaiFace.left_col * width,\n          topRow: clarifaiFace.top_row * height,\n          rightCol: width - (clarifaiFace.right_col * width),\n          bottomRow: height - (clarifaiFace.bottom_row * height)\n        }\n      });      \n    } else { // if boxData empty\n      // IF 'NO' FACES DETECTED IN IMAGE\n      //console.log(`empty`)\n      this.setState({errors: (`no human face(s) detected, please try another image`) });\n    }\n  }\n\n  displayFaceBox = (boxes) => {\n    this.setState({boxes: boxes});\n  }\n\n  onButtonSubmit = () => {\n    console.log('click');\n    this.setState({imageUrl: this.state.input});\n    \n    fetch(\"https://api.clarifai.com/v2/models/face-detection/outputs\", returnClarifaiJSONRequest(this.state.input))\n    .then(response => response.json())\n    .then(result => \n      this.displayFaceBox(this.calculateFaceLocation(result)))\n    .catch(error => console.log('error', error));\n  \n  }\n\n    render = () => {\n      return (\n        <div className=\"App\">\n        \n        <ParticlesBg type=\"cobweb\" bg={true} />\n          <Navigation/>\n          <Logo/>\n          <Rank/>\n          <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/> {/* Pass in The onInputChange event as a props*/}\n          <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\n          \n        </div>\n      );\n      }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}